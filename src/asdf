./state.c:32:        (void) fprintf(stderr, "Error opening %s\n", RANDFILE);
./state.c:36:            (void) fprintf(stderr, "Error reading from %s\n", RANDFILE);
./state.c:42:        fprintf(stderr, "Seed = %lu\n", seed);
./2pc_evaluator.c:21:    printf("eval_inputs: %d %d\n", input[0], input[1]);
./2pc_evaluator.c:122:        (void) sprintf(selName, "%s/%s", EVALUATOR_DIR, "sel");
./2pc_evaluator.c:123:        (void) sprintf(lblName, "%s/%s", EVALUATOR_DIR, "lbl");
./2pc_evaluator.c:224:        (void) sprintf(selName, "%s/%s", EVALUATOR_DIR, "sel");
./2pc_evaluator.c:225:        (void) sprintf(lblName, "%s/%s", EVALUATOR_DIR, "lbl");
./2pc_evaluator.c:254:            //printf("(gc_id: %d, wire: %d) grabbing garb input: %d\n", input_mapping->gc_id[i], input_mapping->wire_id[i], garb_p);
./2pc_evaluator.c:258:            //printf("(gc_id: %d, wire: %d) grabbing eval input: %d\n", input_mapping->gc_id[i], input_mapping->wire_id[i], eval_p);
./2pc_evaluator.c:310:    printf("Output: ");
./2pc_evaluator.c:312:        printf("%d", output[i]);
./2pc_evaluator.c:314:    printf("\n");
./2pc_evaluator.c:345:                // printf("evaling %d on instruction %d\n", savedCircId, i);
./2pc_evaluator.c:350:                // printf("chaining (%d,%d) -> (%d,%d)\n", cur->chFromCircId, cur->chFromWireId, cur->chToCircId, cur->chToWireId);
./2pc_evaluator.c:356:                printf("Error: Instruction %d is not of a valid type\n", i);
./2pc_function_spec.c:27:print_function(FunctionSpec* function) 
./2pc_function_spec.c:29:    print_components(function->components, function->num_component_types);
./2pc_function_spec.c:30:    print_input_mapping(&(function->input_mapping));
./2pc_function_spec.c:31:    print_instructions(&(function->instructions));
./2pc_function_spec.c:32:    printf("not printing output\n");
./2pc_function_spec.c:44:    //printf("loading %s\n", path);
./2pc_function_spec.c:48:        printf("Write: Error in opening file.\n");
./2pc_function_spec.c:60:        fprintf(stderr, "error load json on line %d: %s\n", error.line, error.text);
./2pc_function_spec.c:80:        fprintf(stderr, "error loading json components");
./2pc_function_spec.c:85:        fprintf(stderr, "error loading json components");
./2pc_function_spec.c:90:        fprintf(stderr, "error loading json instructions");
./2pc_function_spec.c:95:        fprintf(stderr, "error loading json output");
./2pc_function_spec.c:100:    //print_function(function);
./2pc_function_spec.c:183:        printf("Output not matching number of outputs indicated by function->m\n");
./2pc_function_spec.c:184:        printf("m = %d, sum = %d\n", function->m, sum);
./2pc_function_spec.c:191:print_components(FunctionComponent* components, int num_component_types) 
./2pc_function_spec.c:193:    printf("print_components not yet implemented\n");
./2pc_function_spec.c:197:print_input_mapping(InputMapping* inputMapping) 
./2pc_function_spec.c:199:    printf("InputMapping size: %d\n", inputMapping->size);
./2pc_function_spec.c:205:        printf("%d -> (%d, %d), inputter: %s\n", inputMapping->input_idx[i], inputMapping->gc_id[i], 
./2pc_function_spec.c:211:print_instructions(Instructions* instr) 
./2pc_function_spec.c:213:    printf("Instructions:\n");
./2pc_function_spec.c:217:                printf("EVAL %d\n", instr->instr[i].evCircId);
./2pc_function_spec.c:220:                printf("CHAIN (%d, %d) -> (%d, %d) with offset (%llu, %llu)\n", 
./2pc_function_spec.c:230:                printf("Not printing command\n");
./2pc_function_spec.c:332:        fprintf(stderr, "circuit type error when loading json: can't detect %s\n", type);
./2pc_function_spec.c:429:                fprintf(stderr, "Instruction %d was invalid: %s\n", i, sType);
./2pc_function_spec.c:435:        fprintf(stderr, "tot_raw_instructions %d does not match number of instructions %d", num_instructions, idx);
./2pc_function_spec.c:522:                printf("instruction type not detected while readBufferIntoInstructons. \n");
./2pc_garbler.c:135:        (void) sprintf(lblName, "%s/%s", GARBLER_DIR, "lbl");
./2pc_garbler.c:169:        /*printf("loaded circuit of type: %d\n", chained_gcs[i].type);*/
./2pc_garbler.c:176:        fprintf(stderr, "Could not load function %s\n", function_path);
./2pc_garbler.c:280:        (void) sprintf(lblName, "%s/%s", GARBLER_DIR, "lbl");
./2pc_garbler.c:399:            fprintf(stderr, "Not enough circuits of type %d available\n", needed_type);
./net.c:72:        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
./net.c:96:        fprintf(stderr, "server: failed to bind\n");
./net.c:107:    fprintf(stderr, "server: waiting for connections...\n");
./net.c:133:        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
./net.c:151:        fprintf(stderr, "client: failed to connect\n");
./net.c:157:    printf("client: connecting to %s\n", s);
./utils.c:82:        printf("Write: Error in opening file.\n");
./utils.c:99:        printf("Write: Error in opening file.\n");
./utils.c:110:    fprintf(stderr, "DEBUG: %s\n", s);
./out:1:./state.c:32:        (void) fprintf(stderr, "Error opening %s\n", RANDFILE);
./out:2:./state.c:36:            (void) fprintf(stderr, "Error reading from %s\n", RANDFILE);
./out:3:./state.c:42:        fprintf(stderr, "Seed = %lu\n", seed);
./out:4:./2pc_evaluator.c:21:    printf("eval_inputs: %d %d\n", input[0], input[1]);
./out:5:./2pc_evaluator.c:122:        (void) sprintf(selName, "%s/%s", EVALUATOR_DIR, "sel");
./out:6:./2pc_evaluator.c:123:        (void) sprintf(lblName, "%s/%s", EVALUATOR_DIR, "lbl");
./out:7:./2pc_evaluator.c:224:        (void) sprintf(selName, "%s/%s", EVALUATOR_DIR, "sel");
./out:8:./2pc_evaluator.c:225:        (void) sprintf(lblName, "%s/%s", EVALUATOR_DIR, "lbl");
./out:9:./2pc_evaluator.c:254:            //printf("(gc_id: %d, wire: %d) grabbing garb input: %d\n", input_mapping->gc_id[i], input_mapping->wire_id[i], garb_p);
./out:10:./2pc_evaluator.c:258:            //printf("(gc_id: %d, wire: %d) grabbing eval input: %d\n", input_mapping->gc_id[i], input_mapping->wire_id[i], eval_p);
./out:11:./2pc_evaluator.c:310:    printf("Output: ");
./out:12:./2pc_evaluator.c:312:        printf("%d", output[i]);
./out:13:./2pc_evaluator.c:314:    printf("\n");
./out:14:./2pc_evaluator.c:345:                // printf("evaling %d on instruction %d\n", savedCircId, i);
./out:15:./2pc_evaluator.c:350:                // printf("chaining (%d,%d) -> (%d,%d)\n", cur->chFromCircId, cur->chFromWireId, cur->chToCircId, cur->chToWireId);
./out:16:./2pc_evaluator.c:356:                printf("Error: Instruction %d is not of a valid type\n", i);
./out:17:./2pc_function_spec.c:27:print_function(FunctionSpec* function) 
./out:18:./2pc_function_spec.c:29:    print_components(function->components, function->num_component_types);
./out:19:./2pc_function_spec.c:30:    print_input_mapping(&(function->input_mapping));
./out:20:./2pc_function_spec.c:31:    print_instructions(&(function->instructions));
./out:21:./2pc_function_spec.c:32:    printf("not printing output\n");
./out:22:./2pc_function_spec.c:44:    //printf("loading %s\n", path);
./out:23:./2pc_function_spec.c:48:        printf("Write: Error in opening file.\n");
./out:24:./2pc_function_spec.c:60:        fprintf(stderr, "error load json on line %d: %s\n", error.line, error.text);
./out:25:./2pc_function_spec.c:80:        fprintf(stderr, "error loading json components");
./out:26:./2pc_function_spec.c:85:        fprintf(stderr, "error loading json components");
./out:27:./2pc_function_spec.c:90:        fprintf(stderr, "error loading json instructions");
./out:28:./2pc_function_spec.c:95:        fprintf(stderr, "error loading json output");
./out:29:./2pc_function_spec.c:100:    //print_function(function);
./out:30:./2pc_function_spec.c:183:        printf("Output not matching number of outputs indicated by function->m\n");
./out:31:./2pc_function_spec.c:184:        printf("m = %d, sum = %d\n", function->m, sum);
./out:32:./2pc_function_spec.c:191:print_components(FunctionComponent* components, int num_component_types) 
./out:33:./2pc_function_spec.c:193:    printf("print_components not yet implemented\n");
./out:34:./2pc_function_spec.c:197:print_input_mapping(InputMapping* inputMapping) 
./out:35:./2pc_function_spec.c:199:    printf("InputMapping size: %d\n", inputMapping->size);
./out:36:./2pc_function_spec.c:205:        printf("%d -> (%d, %d), inputter: %s\n", inputMapping->input_idx[i], inputMapping->gc_id[i], 
./out:37:./2pc_function_spec.c:211:print_instructions(Instructions* instr) 
./out:38:./2pc_function_spec.c:213:    printf("Instructions:\n");
./out:39:./2pc_function_spec.c:217:                printf("EVAL %d\n", instr->instr[i].evCircId);
./out:40:./2pc_function_spec.c:220:                printf("CHAIN (%d, %d) -> (%d, %d) with offset (%llu, %llu)\n", 
./out:41:./2pc_function_spec.c:230:                printf("Not printing command\n");
./out:42:./2pc_function_spec.c:332:        fprintf(stderr, "circuit type error when loading json: can't detect %s\n", type);
./out:43:./2pc_function_spec.c:429:                fprintf(stderr, "Instruction %d was invalid: %s\n", i, sType);
./out:44:./2pc_function_spec.c:435:        fprintf(stderr, "tot_raw_instructions %d does not match number of instructions %d", num_instructions, idx);
./out:45:./2pc_function_spec.c:522:                printf("instruction type not detected while readBufferIntoInstructons. \n");
./out:46:./2pc_garbler.c:135:        (void) sprintf(lblName, "%s/%s", GARBLER_DIR, "lbl");
./out:47:./2pc_garbler.c:169:        /*printf("loaded circuit of type: %d\n", chained_gcs[i].type);*/
./out:48:./2pc_garbler.c:176:        fprintf(stderr, "Could not load function %s\n", function_path);
./out:49:./2pc_garbler.c:280:        (void) sprintf(lblName, "%s/%s", GARBLER_DIR, "lbl");
./out:50:./2pc_garbler.c:399:            fprintf(stderr, "Not enough circuits of type %d available\n", needed_type);
./out:51:./net.c:72:        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
./out:52:./net.c:96:        fprintf(stderr, "server: failed to bind\n");
./out:53:./net.c:107:    fprintf(stderr, "server: waiting for connections...\n");
./out:54:./net.c:133:        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
./out:55:./net.c:151:        fprintf(stderr, "client: failed to connect\n");
./out:56:./net.c:157:    printf("client: connecting to %s\n", s);
./out:57:./utils.c:82:        printf("Write: Error in opening file.\n");
./out:58:./utils.c:99:        printf("Write: Error in opening file.\n");
./out:59:./utils.c:110:    fprintf(stderr, "DEBUG: %s\n", s);
./out:60:./2pc_garbled_circuit.c:40:    printf("outputWires %d %d\n",
./out:61:./2pc_garbled_circuit.c:100:                //printf("Giving D[0][%d] inputWires: %d\n", j, D[0][j][0]);
./out:62:./2pc_garbled_circuit.c:103:                //printf("Giving D[%d][0] inputWires: %d\n", i, D[i][0][0]);
./out:63:./2pc_garbled_circuit.c:113:    //printf("a got: %d %d\n", a[0], a[1]);
./out:64:./2pc_garbled_circuit.c:114:    //printf("b got: %d %d\n", b[0], b[1]);
./out:65:./2pc_garbled_circuit.c:135:            //printf("i,j: %d,%d\n", i,j);
./out:66:./2pc_garbled_circuit.c:136:            //printf("coreInputWires: (%d) (%d) (%d) (%d %d) (%d %d)\n",
./out:67:./2pc_garbled_circuit.c:145:            //printf("coreOutputWires: (%d)\n", coreOutputWires[0]);
./out:68:./2pc_garbled_circuit.c:156:    printf("outputWires %d %d %d %d\n",
./out:69:./2pc_garbled_circuit.c:195:    //printf("D_minus_minus %d\n", D_minus_minus[0]);
./out:70:./2pc_garbled_circuit.c:196:    //printf("D_minus_same %d\n", D_minus_same[0]);
./out:71:./2pc_garbled_circuit.c:197:    //printf("D_same_minus %d\n", D_same_minus[0]);
./out:72:./2pc_garbled_circuit.c:198:    //printf("symbol0 %d %d\n", symbol0[0], symbol0[1]);
./out:73:./2pc_garbled_circuit.c:199:    //printf("symbol1 %d %d\n", symbol1[0], symbol1[1]);
./out:74:./2pc_garbled_circuit.c:208:    printf("2 * DIntSize = %d\n", val);
./out:75:./2pc_garbled_circuit.c:211:    printf("val: %d\n", val);
./out:76:./2pc_garbled_circuit.c:212:    printf("min_inputs[0]: %d\n", min_inputs[0]);
./out:77:./2pc_garbled_circuit.c:213:    printf("min_inputs[1]: %d\n", min_inputs[1]);
./out:78:./2pc_garbled_circuit.c:214:    printf("min_outputs: %d\n", min_outputs[0]);
./out:79:./2pc_garbled_circuit.c:473:        printf("%d\n", outs[i]);
./out:80:./2pc_garbled_circuit.c:660:        printf("Buffer overflow error in save.\n"); 
./out:81:./2pc_garbled_circuit.c:667:        sprintf(fileName, GARBLER_GC_PATH, chained_gc->id);
./out:82:./2pc_garbled_circuit.c:669:        sprintf(fileName, EVALUATOR_GC_PATH, chained_gc->id);
./out:83:./2pc_garbled_circuit.c:701:        sprintf(fileName, GARBLER_GC_PATH, id);
./out:84:./2pc_garbled_circuit.c:703:        sprintf(fileName, EVALUATOR_GC_PATH, id);
./out:85:./2pc_garbled_circuit.c:772:        printf("Buffer overflow error\n"); 
./out:86:./2pc_garbled_circuit.c:781:print_block(block blk)
./out:87:./2pc_garbled_circuit.c:784:    printf("%016lx%016lx", val[1], val[0]);
./out:88:./2pc_garbled_circuit.c:788:print_garbled_gate(GarbledGate *gg)
./out:89:./2pc_garbled_circuit.c:790:    printf("%ld %ld %ld %d %d\n", gg->input0, gg->input1, gg->output, gg->id,
./out:90:./2pc_garbled_circuit.c:795:print_garbled_table(GarbledTable *gt)
./out:91:./2pc_garbled_circuit.c:797:    print_block(gt->table[0]);
./out:92:./2pc_garbled_circuit.c:798:    printf(" ");
./out:93:./2pc_garbled_circuit.c:799:    print_block(gt->table[1]);
./out:94:./2pc_garbled_circuit.c:800:    printf(" ");
./out:95:./2pc_garbled_circuit.c:801:    print_block(gt->table[2]);
./out:96:./2pc_garbled_circuit.c:802:    printf(" ");
./out:97:./2pc_garbled_circuit.c:803:    print_block(gt->table[3]);
./out:98:./2pc_garbled_circuit.c:804:    printf("\n");
./out:99:./2pc_garbled_circuit.c:808:print_wire(Wire *w)
./out:100:./2pc_garbled_circuit.c:810:    printf("%ld ", w->id);
./out:101:./2pc_garbled_circuit.c:811:    print_block(w->label0);
./out:102:./2pc_garbled_circuit.c:812:    printf(" ");
./out:103:./2pc_garbled_circuit.c:813:    print_block(w->label1);
./out:104:./2pc_garbled_circuit.c:814:    printf("\n");
./out:105:./2pc_garbled_circuit.c:818:print_gc(GarbledCircuit *gc)
./out:106:./2pc_garbled_circuit.c:820:    printf("n = %d\n", gc->n);
./out:107:./2pc_garbled_circuit.c:821:    printf("m = %d\n", gc->m);
./out:108:./2pc_garbled_circuit.c:822:    printf("q = %d\n", gc->q);
./out:109:./2pc_garbled_circuit.c:823:    printf("r = %d\n", gc->r);
./out:110:./2pc_garbled_circuit.c:825:        printf("garbled gate %d: ", i);
./out:111:./2pc_garbled_circuit.c:826:        print_garbled_gate(&gc->garbledGates[i]);
./out:112:./2pc_garbled_circuit.c:827:        printf("garbled table %d: ", i);
./out:113:./2pc_garbled_circuit.c:828:        print_garbled_table(&gc->garbledTable[i]);
./out:114:./2pc_garbled_circuit.c:831:        printf("wire %d: ", i);
./out:115:./2pc_garbled_circuit.c:832:        print_wire(&gc->wires[i]);
./out:116:./2pc_garbled_circuit.c:835:        printf("%d\n", gc->outputs[i]);
./out:117:./2pc_garbled_circuit.c:840:print_blocks(const char *str, block *blks, int length)
./out:118:./2pc_garbled_circuit.c:843:        printf("%s ", str);
./out:119:./2pc_garbled_circuit.c:844:        print_block(blks[i]);
./out:120:./2pc_garbled_circuit.c:845:        printf("\n");
./out:121:./main.c:76:/*     printf("Running 2pcrun_local()\n"); */
./out:122:./main.c:107:/*     printf("Output: "); */
./out:123:./main.c:109:/*         printf("%d", outputVals[i]); */
./out:124:./main.c:111:/*     printf("\n"); */
./out:125:./main.c:120:/*     printf("Running test\n"); */
./out:126:./main.c:177:/*     printf("output: "); */
./out:127:./main.c:179:/*         printf("%d", output[j]); */
./out:128:./main.c:181:/*     printf("\n"); */
./out:129:./tests.c:27://    printf("------------------\n");
./out:130:./tests.c:28://    printf("Running all tests\n");
./out:131:./tests.c:29://    printf("------------------\n");
./out:132:./tests.c:32://        printf("---test2() failed\n");
./out:133:./tests.c:37://        printf("---simple_test() failed\n");
./out:134:./tests.c:42://        printf("---json_test() failed\n");
./out:135:./tests.c:47://    //    printf("---test_saving_reading() failed\n");
./out:136:./tests.c:52://        printf("--- function_spec_test() failed\n");
./out:137:./tests.c:57://        printf("--- input_mapping_serialize_test() failed\n");
./out:138:./tests.c:60://        printf("--- input_mapping_serialize_test() passed\n");
./out:139:./tests.c:64://        printf("----------------\n");
./out:140:./tests.c:65://        printf("At least one test failed\n");
./out:141:./tests.c:66://        printf("----------------\n");
./out:142:./tests.c:69://        printf("----------------\n");
./out:143:./tests.c:70://        printf("All tests passed\n");
./out:144:./tests.c:71://        printf("----------------\n");
./out:145:./tests.c:99://        printf("metadata failed in test_saving_reading\n");
./out:146:./tests.c:103://        printf("garbledGates failed in test_saving_reading\n");
./out:147:./tests.c:108://        printf("garbledTables failed in test_saving_reading\n");
./out:148:./tests.c:113://        printf("wires failed in test_saving_reading\n");
./out:149:./tests.c:174://    printf("free xor turned on\n");
./out:150:./tests.c:176://    printf("free xor turned off\n");
./out:151:./tests.c:180://    printf("row reduction turned on\n");
./out:152:./tests.c:182://    printf("row reduction turned off\n"):
./out:153:./tests.c:186://    printf("DKC2 turned on\n");
./out:154:./tests.c:188://    printf("DKC2 turned off\n");
./out:155:./tests.c:190://    printf("\n");
./out:156:./tests.c:313://    //print_function(&function);
./out:157:./tests.c:339://        printf("Instructions are of different size\n");
./out:158:./tests.c:345://            printf("An instruction is of incorrect type\n");
./out:159:./tests.c:372://        printf("InputMappings are of a different size\n");
./out:160:./tests.c:376://    printf("break here\n");
./out:161:./tests.c:379://        printf("InputMappings have a different wire id at index %d\n", i);
./out:162:./ot_np.c:49:    //fprintf(stderr, "OT-NP: Using AESNI\n");
./out:163:./ot_np.c:52:    //fprintf(stderr, "OT-NP: Using SHA-1\n");
./out:164:./ot_np.c:93:    //fprintf(stderr, "Initialization: %f\n", end - start);
./out:165:./ot_np.c:101:    //fprintf(stderr, "Send g^r to receiver: %f\n", end - start);
./out:166:./ot_np.c:111:    //fprintf(stderr, "Send Cs to receiver: %f\n", end - start);
./out:167:./ot_np.c:119:    //fprintf(stderr, "Compute C_i^r: %f\n", end - start);
./out:168:./ot_np.c:129:    //fprintf(stderr, "Get pk0 from receiver: %f\n", end - start);
./out:169:./ot_np.c:169:    //fprintf(stderr, "Send hashes to receiver: %f\n", end - start);
./out:170:./ot_np.c:208:    //fprintf(stderr, "OT-NP: Using AESNI\n");
./out:171:./ot_np.c:211:    //fprintf(stderr, "OT-NP: Using SHA-1\n");
./out:172:./ot_np.c:246:    //fprintf(stderr, "Get g^r from sender: %f\n", end - start);
./out:173:./ot_np.c:256:    //fprintf(stderr, "Get Cs from sender: %f\n", end - start);
./out:174:./ot_np.c:281:    //fprintf(stderr, "Send pk0s to sender: %f\n", end - start);
./out:175:./ot_np.c:318:    //fprintf(stderr, "Receive hashes from sender: %f\n", end - start);
./out:176:./log.c:19:        fprintf(stderr, "[%s]: %s\n", tag, msg);
./out:177:./log.c:28:        gmp_fprintf(stderr, "[%s]: %s%Zx\n", tag, msg, z);
./out:178:./old_main.c:23://print_block(block blk)
./out:179:./old_main.c:26://    printf("%016lx%016lx", val[1], val[0]);
./out:180:./old_main.c:156:    printf("broken since not changing R\n");
./out:181:./old_main.c:163:    printf("Send GC: %ld\n", end - start);
./out:182:./old_main.c:212:        fprintf(stderr, "mapOutputs failed!\n");
./out:183:./old_main.c:215:    printf("Output: ");
./out:184:./old_main.c:217:        printf("%d", outputVals[i]);
./out:185:./old_main.c:219:    printf("\n");
./out:186:./old_main.c:255:            /*     fprintf(stderr, "Option -%c requires an argument.\n", optopt); */
./out:187:./old_main.c:256:            if (isprint (optopt))
./out:188:./old_main.c:257:                fprintf(stderr, "Unknown option `-%c'.\n", optopt);
./out:189:./old_main.c:259:                fprintf(stderr, "Unknown option character `\\x%x'.\n", optopt);
./2pc_garbled_circuit.c:40:    printf("outputWires %d %d\n",
./2pc_garbled_circuit.c:100:                //printf("Giving D[0][%d] inputWires: %d\n", j, D[0][j][0]);
./2pc_garbled_circuit.c:103:                //printf("Giving D[%d][0] inputWires: %d\n", i, D[i][0][0]);
./2pc_garbled_circuit.c:113:    //printf("a got: %d %d\n", a[0], a[1]);
./2pc_garbled_circuit.c:114:    //printf("b got: %d %d\n", b[0], b[1]);
./2pc_garbled_circuit.c:135:            //printf("i,j: %d,%d\n", i,j);
./2pc_garbled_circuit.c:136:            //printf("coreInputWires: (%d) (%d) (%d) (%d %d) (%d %d)\n",
./2pc_garbled_circuit.c:145:            //printf("coreOutputWires: (%d)\n", coreOutputWires[0]);
./2pc_garbled_circuit.c:156:    printf("outputWires %d %d %d %d\n",
./2pc_garbled_circuit.c:195:    //printf("D_minus_minus %d\n", D_minus_minus[0]);
./2pc_garbled_circuit.c:196:    //printf("D_minus_same %d\n", D_minus_same[0]);
./2pc_garbled_circuit.c:197:    //printf("D_same_minus %d\n", D_same_minus[0]);
./2pc_garbled_circuit.c:198:    //printf("symbol0 %d %d\n", symbol0[0], symbol0[1]);
./2pc_garbled_circuit.c:199:    //printf("symbol1 %d %d\n", symbol1[0], symbol1[1]);
./2pc_garbled_circuit.c:208:    printf("2 * DIntSize = %d\n", val);
./2pc_garbled_circuit.c:211:    printf("val: %d\n", val);
./2pc_garbled_circuit.c:212:    printf("min_inputs[0]: %d\n", min_inputs[0]);
./2pc_garbled_circuit.c:213:    printf("min_inputs[1]: %d\n", min_inputs[1]);
./2pc_garbled_circuit.c:214:    printf("min_outputs: %d\n", min_outputs[0]);
./2pc_garbled_circuit.c:473:        printf("%d\n", outs[i]);
./2pc_garbled_circuit.c:660:        printf("Buffer overflow error in save.\n"); 
./2pc_garbled_circuit.c:667:        sprintf(fileName, GARBLER_GC_PATH, chained_gc->id);
./2pc_garbled_circuit.c:669:        sprintf(fileName, EVALUATOR_GC_PATH, chained_gc->id);
./2pc_garbled_circuit.c:701:        sprintf(fileName, GARBLER_GC_PATH, id);
./2pc_garbled_circuit.c:703:        sprintf(fileName, EVALUATOR_GC_PATH, id);
./2pc_garbled_circuit.c:772:        printf("Buffer overflow error\n"); 
./2pc_garbled_circuit.c:781:print_block(block blk)
./2pc_garbled_circuit.c:784:    printf("%016lx%016lx", val[1], val[0]);
./2pc_garbled_circuit.c:788:print_garbled_gate(GarbledGate *gg)
./2pc_garbled_circuit.c:790:    printf("%ld %ld %ld %d %d\n", gg->input0, gg->input1, gg->output, gg->id,
./2pc_garbled_circuit.c:795:print_garbled_table(GarbledTable *gt)
./2pc_garbled_circuit.c:797:    print_block(gt->table[0]);
./2pc_garbled_circuit.c:798:    printf(" ");
./2pc_garbled_circuit.c:799:    print_block(gt->table[1]);
./2pc_garbled_circuit.c:800:    printf(" ");
./2pc_garbled_circuit.c:801:    print_block(gt->table[2]);
./2pc_garbled_circuit.c:802:    printf(" ");
./2pc_garbled_circuit.c:803:    print_block(gt->table[3]);
./2pc_garbled_circuit.c:804:    printf("\n");
./2pc_garbled_circuit.c:808:print_wire(Wire *w)
./2pc_garbled_circuit.c:810:    printf("%ld ", w->id);
./2pc_garbled_circuit.c:811:    print_block(w->label0);
./2pc_garbled_circuit.c:812:    printf(" ");
./2pc_garbled_circuit.c:813:    print_block(w->label1);
./2pc_garbled_circuit.c:814:    printf("\n");
./2pc_garbled_circuit.c:818:print_gc(GarbledCircuit *gc)
./2pc_garbled_circuit.c:820:    printf("n = %d\n", gc->n);
./2pc_garbled_circuit.c:821:    printf("m = %d\n", gc->m);
./2pc_garbled_circuit.c:822:    printf("q = %d\n", gc->q);
./2pc_garbled_circuit.c:823:    printf("r = %d\n", gc->r);
./2pc_garbled_circuit.c:825:        printf("garbled gate %d: ", i);
./2pc_garbled_circuit.c:826:        print_garbled_gate(&gc->garbledGates[i]);
./2pc_garbled_circuit.c:827:        printf("garbled table %d: ", i);
./2pc_garbled_circuit.c:828:        print_garbled_table(&gc->garbledTable[i]);
./2pc_garbled_circuit.c:831:        printf("wire %d: ", i);
./2pc_garbled_circuit.c:832:        print_wire(&gc->wires[i]);
./2pc_garbled_circuit.c:835:        printf("%d\n", gc->outputs[i]);
./2pc_garbled_circuit.c:840:print_blocks(const char *str, block *blks, int length)
./2pc_garbled_circuit.c:843:        printf("%s ", str);
./2pc_garbled_circuit.c:844:        print_block(blks[i]);
./2pc_garbled_circuit.c:845:        printf("\n");
./main.c:76:/*     printf("Running 2pcrun_local()\n"); */
./main.c:107:/*     printf("Output: "); */
./main.c:109:/*         printf("%d", outputVals[i]); */
./main.c:111:/*     printf("\n"); */
./main.c:120:/*     printf("Running test\n"); */
./main.c:177:/*     printf("output: "); */
./main.c:179:/*         printf("%d", output[j]); */
./main.c:181:/*     printf("\n"); */
./tests.c:27://    printf("------------------\n");
./tests.c:28://    printf("Running all tests\n");
./tests.c:29://    printf("------------------\n");
./tests.c:32://        printf("---test2() failed\n");
./tests.c:37://        printf("---simple_test() failed\n");
./tests.c:42://        printf("---json_test() failed\n");
./tests.c:47://    //    printf("---test_saving_reading() failed\n");
./tests.c:52://        printf("--- function_spec_test() failed\n");
./tests.c:57://        printf("--- input_mapping_serialize_test() failed\n");
./tests.c:60://        printf("--- input_mapping_serialize_test() passed\n");
./tests.c:64://        printf("----------------\n");
./tests.c:65://        printf("At least one test failed\n");
./tests.c:66://        printf("----------------\n");
./tests.c:69://        printf("----------------\n");
./tests.c:70://        printf("All tests passed\n");
./tests.c:71://        printf("----------------\n");
./tests.c:99://        printf("metadata failed in test_saving_reading\n");
./tests.c:103://        printf("garbledGates failed in test_saving_reading\n");
./tests.c:108://        printf("garbledTables failed in test_saving_reading\n");
./tests.c:113://        printf("wires failed in test_saving_reading\n");
./tests.c:174://    printf("free xor turned on\n");
./tests.c:176://    printf("free xor turned off\n");
./tests.c:180://    printf("row reduction turned on\n");
./tests.c:182://    printf("row reduction turned off\n"):
./tests.c:186://    printf("DKC2 turned on\n");
./tests.c:188://    printf("DKC2 turned off\n");
./tests.c:190://    printf("\n");
./tests.c:313://    //print_function(&function);
./tests.c:339://        printf("Instructions are of different size\n");
./tests.c:345://            printf("An instruction is of incorrect type\n");
./tests.c:372://        printf("InputMappings are of a different size\n");
./tests.c:376://    printf("break here\n");
./tests.c:379://        printf("InputMappings have a different wire id at index %d\n", i);
./ot_np.c:49:    //fprintf(stderr, "OT-NP: Using AESNI\n");
./ot_np.c:52:    //fprintf(stderr, "OT-NP: Using SHA-1\n");
./ot_np.c:93:    //fprintf(stderr, "Initialization: %f\n", end - start);
./ot_np.c:101:    //fprintf(stderr, "Send g^r to receiver: %f\n", end - start);
./ot_np.c:111:    //fprintf(stderr, "Send Cs to receiver: %f\n", end - start);
./ot_np.c:119:    //fprintf(stderr, "Compute C_i^r: %f\n", end - start);
./ot_np.c:129:    //fprintf(stderr, "Get pk0 from receiver: %f\n", end - start);
./ot_np.c:169:    //fprintf(stderr, "Send hashes to receiver: %f\n", end - start);
./ot_np.c:208:    //fprintf(stderr, "OT-NP: Using AESNI\n");
./ot_np.c:211:    //fprintf(stderr, "OT-NP: Using SHA-1\n");
./ot_np.c:246:    //fprintf(stderr, "Get g^r from sender: %f\n", end - start);
./ot_np.c:256:    //fprintf(stderr, "Get Cs from sender: %f\n", end - start);
./ot_np.c:281:    //fprintf(stderr, "Send pk0s to sender: %f\n", end - start);
./ot_np.c:318:    //fprintf(stderr, "Receive hashes from sender: %f\n", end - start);
./log.c:19:        fprintf(stderr, "[%s]: %s\n", tag, msg);
./log.c:28:        gmp_fprintf(stderr, "[%s]: %s%Zx\n", tag, msg, z);
./old_main.c:23://print_block(block blk)
./old_main.c:26://    printf("%016lx%016lx", val[1], val[0]);
./old_main.c:156:    printf("broken since not changing R\n");
./old_main.c:163:    printf("Send GC: %ld\n", end - start);
./old_main.c:212:        fprintf(stderr, "mapOutputs failed!\n");
./old_main.c:215:    printf("Output: ");
./old_main.c:217:        printf("%d", outputVals[i]);
./old_main.c:219:    printf("\n");
./old_main.c:255:            /*     fprintf(stderr, "Option -%c requires an argument.\n", optopt); */
./old_main.c:256:            if (isprint (optopt))
./old_main.c:257:                fprintf(stderr, "Unknown option `-%c'.\n", optopt);
./old_main.c:259:                fprintf(stderr, "Unknown option character `\\x%x'.\n", optopt);
